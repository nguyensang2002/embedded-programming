
//~~~~~~~~~~~~~~~~~~~Địa_chỉ_BLYNK_và_WIFI~~~~~~~~~~~~~~~~~~~~~~~~
/* Fill-in your Template ID (only if using Blynk.Cloud) *///     ~
#define BLYNK_TEMPLATE_ID "TMPL69ZwsxwdD"//                      ~
#define BLYNK_TEMPLATE_NAME "ESP32 Automation"//                 ~
#define BLYNK_AUTH_TOKEN "WFAehKOsaXP1FgseY2lAw3YUNECjzzvS"//    ~
//                                                               ~
// Đăng nhập tên wift và mật khẩu                                ~
char ssid[] = "TOTOLINK_N350RT";//                               ~
char pass[] = "09040704";//                                      ~
//~~~~~~~~~~~~~~~~~~~Địa_chỉ_BLYNK_và_WIFI~~~~~~~~~~~~~~~~~~~~~~~~

//++++++++++++++++++++++++++++++++++++++ Các thư viện+++++++++++++++++++++++++++++++++++++++++++++++
#include <WiFi.h> // Thư viện để kết nối WiFi                                                      +
#include <WiFiClient.h> // Thư viện để tạo một client WiFi                                         +
#include <BlynkSimpleEsp32.h> // Thư viện Blynk dành cho ESP32                                     +
#include <IRremote.h> // Thư viện để điều khiển từ xa bằng hồng ngoại                              +
#include <Preferences.h> // Thư viện để quản lý và lưu trữ dữ liệu nhỏ vào bộ nhớ flash của ESP32  +
#include <Wire.h> // Thư viện để điều khiển giao tiếp I2C                                          +
#include <SPI.h> // Thư viện để điều khiển giao tiếp SPI                                           +
#include <Adafruit_Sensor.h> // Thư viện hỗ trợ cảm biến từ Adafruit                               +
#include <Adafruit_BME280.h> // Thư viện để tương tác với cảm biến BME280                          +
#include <Adafruit_GFX.h> // Thư viện đồ họa cơ bản từ Adafruit                                    +
#include <Adafruit_SSD1306.h> // Thư viện để điều khiển màn hình OLED sử dụng driver SSD1306       +
//++++++++++++++++++++++++++++++++++++++ Các thư viện+++++++++++++++++++++++++++++++++++++++++++++++


Preferences pref;
int   wifiFlag = 0;
float temperature1 = 0;
float humidity1   = 0;
float pressure1 = 0;
float altitude1   = 0;

// Relay State
bool toggleState_1 = LOW; //Định nghĩa số nguyên ghi nhớ trạng thái chuyển đổi cho rơle 1
bool toggleState_2 = LOW; //Định nghĩa số nguyên ghi nhớ trạng thái chuyển đổi cho rơle 2
bool toggleState_3 = LOW; //Định nghĩa số nguyên ghi nhớ trạng thái chuyển đổi cho rơle 3
bool toggleState_4 = LOW; //Định nghĩa số nguyên ghi nhớ trạng thái chuyển đổi cho rơle 4




//======================================================INTERNET__BLYNK==============================================================

#define wifiLed   15 

// Thay đổi chân ảo theo đã đặt
#define VPIN_BUTTON_1    V1 
#define VPIN_BUTTON_2    V2
#define VPIN_BUTTON_3    V3 
#define VPIN_BUTTON_4    V4
#define VPIN_BUTTON_C    V5
#define VPIN_TEMPERATURE V6
#define VPIN_HUMIDITY    V7
#define VPIN_Pressure    V8
#define VPIN_Altitude    V9

char auth[] = BLYNK_AUTH_TOKEN;

BlynkTimer timer;

void checkBlynkStatus()                     // Hàm được gọi mỗi 2 giây bởi SimpleTimer
{
  bool isconnected = Blynk.connected();     // Kiểm tra xem kết nối với máy chủ Blynk có được thiết lập hay không
  // Nếu không kết nối thành công với máy chủ Blynk
  if (isconnected == false) {
    wifiFlag = 1;                          // Đánh dấu rằng không kết nối với Blynk
    Serial.println("Blynk Not Connected"); // In ra màn hình Serial thông báo rằng không kết nối với Blynk
    digitalWrite(wifiLed, LOW);            // Tắt đèn LED hiển thị trạng thái kết nối WiFi
  }
  // Nếu kết nối thành công với máy chủ Blynk
  if (isconnected == true) {
    wifiFlag = 0;                         // Đánh dấu rằng đã kết nối với Blynk
    digitalWrite(wifiLed, HIGH);          // Bật đèn LED hiển thị trạng thái kết nối WiFi
    //Serial.println("Blynk Connected"); // (Tùy chọn) In ra màn hình Serial thông báo rằng đã kết nối với Blynk
  }
}

BLYNK_CONNECTED() {
  // update the latest state to the server
  Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);
  Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);
  Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3);
  Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4);

  Blynk.syncVirtual(VPIN_TEMPERATURE);
  Blynk.syncVirtual(VPIN_HUMIDITY);
  Blynk.syncVirtual(VPIN_Pressure);
  Blynk.syncVirtual(VPIN_Altitude);
}


//======================================================INTERNET__BLYNK================================================================



//************************************************RELAY_SWITCH(BLYNK)*******************************************************************

//xác định GPIO được kết nối với Rơle và công tắc
#define RelayPin1 18 
#define RelayPin2 17  
#define RelayPin3 5  
#define RelayPin4 19

#define SwitchPin1 27  //D27
#define SwitchPin2 14  //D14
#define SwitchPin3 12  //D12
#define SwitchPin4 13  //D13 


// Switch trạng thái
bool SwitchState_1 = LOW;
bool SwitchState_2 = LOW;
bool SwitchState_3 = LOW;
bool SwitchState_4 = LOW;



// Khi nhấn nút Ứng dụng - chuyển trạng thái
BLYNK_WRITE(VPIN_BUTTON_1)                      // Xử lý khi có yêu cầu ghi dữ liệu từ nút ảo VPIN_BUTTON_1 trên ứng dụng Blynk
{
  toggleState_1 = param.asInt();                // Đọc giá trị gửi từ nút ảo và lưu vào biến toggleState_1
  digitalWrite(RelayPin1, !toggleState_1);      // Đảo trạng thái relay theo giá trị toggleState_1, với giả định LOW tương đương với bật relay
  pref.putBool("Relay1", toggleState_1);        // Lưu trạng thái relay vào bộ nhớ flash để giữ trạng thái khi khởi động lại
}


BLYNK_WRITE(VPIN_BUTTON_2) {
  toggleState_2 = param.asInt(); 
  digitalWrite(RelayPin2, !toggleState_2);
  pref.putBool("Relay2", toggleState_2);
}

BLYNK_WRITE(VPIN_BUTTON_3) {
  toggleState_3 = param.asInt();
  digitalWrite(RelayPin3, !toggleState_3);
  pref.putBool("Relay3", toggleState_3);
}

BLYNK_WRITE(VPIN_BUTTON_4) {
  toggleState_4 = param.asInt();
  digitalWrite(RelayPin4, !toggleState_4);
  pref.putBool("Relay4", toggleState_4);
}

BLYNK_WRITE(VPIN_BUTTON_C) {
  all_SwitchOff();
}

void manual_control()
{
  if (digitalRead(SwitchPin1) == LOW && SwitchState_1 == LOW) {
    digitalWrite(RelayPin1, LOW);                                // Kích hoạt relay
    toggleState_1 = HIGH;                                        // Cập nhật trạng thái relay
    SwitchState_1 = HIGH;                                        // Đánh dấu rằng công tắc đã được nhấn
    pref.putBool("Relay1", toggleState_1);                       // Lưu trạng thái relay vào bộ nhớ flash
    Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);            // Cập nhật trạng thái nút ảo trên ứng dụng Blynk
    Serial.println("Switch-1 on");                               // Thông báo trạng thái công tắc trên Serial
}

  if (digitalRead(SwitchPin1) == HIGH && SwitchState_1 == HIGH) {
    digitalWrite(RelayPin1, HIGH);
    toggleState_1 = LOW;
    SwitchState_1 = LOW;
    pref.putBool("Relay1", toggleState_1);
    Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);
    Serial.println("Switch-1 off");
  }

  if (digitalRead(SwitchPin2) == LOW && SwitchState_2 == LOW) {
    digitalWrite(RelayPin2, LOW);
    toggleState_2 = HIGH;
    SwitchState_2 = HIGH;
    pref.putBool("Relay2", toggleState_2);
    Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);
    Serial.println("Switch-2 on");
  }

  if (digitalRead(SwitchPin2) == HIGH && SwitchState_2 == HIGH) {
    digitalWrite(RelayPin2, HIGH);
    toggleState_2 = LOW;
    SwitchState_2 = LOW;
    pref.putBool("Relay2", toggleState_2);
    Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);
    Serial.println("Switch-2 off");
  }

  if (digitalRead(SwitchPin3) == LOW && SwitchState_3 == LOW) {
    digitalWrite(RelayPin3, LOW);
    toggleState_3 = HIGH;
    SwitchState_3 = HIGH;
    pref.putBool("Relay3", toggleState_3);
    Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3);
    Serial.println("Switch-3 on");
  }

  if (digitalRead(SwitchPin3) == HIGH && SwitchState_3 == HIGH) {
    digitalWrite(RelayPin3, HIGH);
    toggleState_3 = LOW;
    SwitchState_3 = LOW;
    pref.putBool("Relay3", toggleState_3);
    Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3);
    Serial.println("Switch-3 off");
  }

  if (digitalRead(SwitchPin4) == LOW && SwitchState_4 == LOW) {
    digitalWrite(RelayPin4, LOW);
    toggleState_4 = HIGH;
    SwitchState_4 = HIGH;
    pref.putBool("Relay4", toggleState_4);
    Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4);
    Serial.println("Switch-4 on");
  }

  if (digitalRead(SwitchPin4) == HIGH && SwitchState_4 == HIGH) {
    digitalWrite(RelayPin4, HIGH);
    toggleState_4 = LOW;
    SwitchState_4 = LOW;
    pref.putBool("Relay4", toggleState_4);
    Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4);
    Serial.println("Switch-4 off");
  }
}    

void all_SwitchOff(){
  toggleState_1 = LOW; digitalWrite(RelayPin1, HIGH); pref.putBool("Relay1", toggleState_1); Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1); delay(100);
  toggleState_2 = LOW; digitalWrite(RelayPin2, HIGH); pref.putBool("Relay2", toggleState_2); Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2); delay(100);
  toggleState_3 = LOW; digitalWrite(RelayPin3, HIGH); pref.putBool("Relay3", toggleState_3); Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3); delay(100);
  toggleState_4 = LOW; digitalWrite(RelayPin4, HIGH); pref.putBool("Relay4", toggleState_4); Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4); delay(100);
  Blynk.virtualWrite(VPIN_HUMIDITY, humidity1);
  Blynk.virtualWrite(VPIN_TEMPERATURE, temperature1);
  Blynk.virtualWrite(VPIN_Pressure, pressure1);
  Blynk.virtualWrite(VPIN_Altitude, altitude1);
}

// Đọc trạng thái của các relay từ bộ nhớ flash và cập nhật chúng vào ứng dụng Blynk thông qua các nút ảo tương ứng
void getRelayState()
{
  Serial.println("reading data from NVS");
  toggleState_1 = pref.getBool("Relay1", 0);        // Đọc trạng thái hiện tại của relay 1 từ bộ nhớ flash. Nếu không có giá trị được lưu trữ, mặc định sẽ là 0 (LOW).
  digitalWrite(RelayPin1, !toggleState_1);          // Đảo trạng thái của relay 1 dựa trên giá trị của toggleState_1. Nếu toggleState_1 là LOW, thì sẽ bật relay, và ngược lại.
  Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1); // Cập nhật trạng thái của nút ảo VPIN_BUTTON_1 trên ứng dụng Blynk dựa trên giá trị của toggleState_1.
  delay(200);                                       // Dừng 200ms trước khi tiếp tục xử lý. Điều này giúp đảm bảo rằng trạng thái của relay không thay đổi quá nhanh khi được cập nhật.


  toggleState_2 = pref.getBool("Relay2", 0);
  digitalWrite(RelayPin2, !toggleState_2); 
  Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);
  delay(200);

  toggleState_3 = pref.getBool("Relay3", 0);
  digitalWrite(RelayPin3, !toggleState_3); 
  Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3);
  delay(200);

  toggleState_4 = pref.getBool("Relay4", 0);
  digitalWrite(RelayPin4, !toggleState_4); 
  Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4);
  delay(200); 
}

//************************************************RELAY_SWITCH(BLYNK)*******************************************************************

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^____TSOP1838 IR Receive_____^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#define IR_Button_1   0xF30CFF00
#define IR_Button_2   0xE718FF00
#define IR_Button_3   0xA15EFF00
#define IR_Button_4   0xF708FF00
#define IR_All_Off    0xE916FF00

#define IR_RECV_PIN   35  //(IR receiver pin)

IRrecv irrecv(IR_RECV_PIN);
decode_results results;

void ir_remote(){
  if (irrecv.decode(&results)) {
      switch(results.value){
          case IR_Button_1:  
            digitalWrite(RelayPin1, toggleState_1);
            toggleState_1 = !toggleState_1;
            pref.putBool("Relay1", toggleState_1);
            Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);
            delay(100);            
            break;
          case IR_Button_2:  
            digitalWrite(RelayPin2, toggleState_2);
            toggleState_2 = !toggleState_2;
            pref.putBool("Relay2", toggleState_2);
            Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);
            delay(100);            
            break;
          case IR_Button_3:  
            digitalWrite(RelayPin3, toggleState_3);
            toggleState_3 = !toggleState_3;
            pref.putBool("Relay3", toggleState_3);
            Blynk.virtualWrite(VPIN_BUTTON_3, toggleState_3);
            delay(100);            
            break;
          case IR_Button_4:  
            digitalWrite(RelayPin4, toggleState_4);
            toggleState_4 = !toggleState_4;
            pref.putBool("Relay4", toggleState_4);
            Blynk.virtualWrite(VPIN_BUTTON_4, toggleState_4);
            delay(100);            
            break;
          case IR_All_Off:
            all_SwitchOff();  
            break;
          default : break;         
        }   
        //Serial.println(results.value, HEX);    
        irrecv.resume();   
  } 
}

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^____TSOP1838 IR Receive_____^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//--------------------------------------------------------------OLED_BME280---------------------------------------------------------------
/*#include <SPI.h>
#define BME_SCK 18
#define BME_MISO 19
#define BME_MOSI 23
#define BME_CS 5*/

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme; // I2C
//Adafruit_BME280 bme(BME_CS); // hardware SPI
//Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK); // software SPI

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);
unsigned long delayTime;

void loop_oled()
{
  display.setCursor(0,0);
  display.clearDisplay();
  
  Serial.print("Temperature = "); Serial.print(bme.readTemperature()); Serial.println(" *C");
  display.print("Temperature: "); display.print(bme.readTemperature()); display.println(" *C");

  Serial.print("Pressure = "); Serial.print(bme.readPressure() / 100.0F); Serial.println(" hPa");
  display.print("Pressure: "); display.print(bme.readPressure() / 100.0F); display.println(" hPa");

  Serial.print("Humidity = "); Serial.print(bme.readHumidity()); Serial.println(" %");
  display.print("Humidity: "); display.print(bme.readHumidity()); display.println(" %");

  Serial.print("altitude = "); Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA)); Serial.println(" ft");
  display.print("altitude: "); display.print(bme.readAltitude(SEALEVELPRESSURE_HPA)); display.println(" ft");

  Serial.println();
  display.display();
  delay(1000);
}

void setup_oled_bm280()
{
  Serial.println(F("BME280 test"));
   
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x64)
   // init done
  display.display();
  delay(100);
  display.clearDisplay();
  display.display();
  display.setTextSize(1.1);
  display.setTextColor(WHITE);
  bool status;
  // default settings
  // (you can also pass in a Wire library object like &Wire2)
  status = bme.begin(0x76);  
  if (!status) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }

  Serial.println("-- Default Test --");
  delayTime = 1000;

  Serial.println();
}

void readSensor(){
  float h = bme.readHumidity();
  float t = bme.readTemperature(); // or dht.readTemperature(true) for Fahrenheit
  float p = bme.readPressure();
  float a = bme.readAltitude(SEALEVELPRESSURE_HPA);
  
  if (isnan(h) || isnan(t) || isnan(p) || isnan(a)) {
    Serial.println("Failed to read from BME280 sensor!");
    return;
  }
  else {
    humidity1 = h;
    temperature1 = t;
    pressure1 = p;
    altitude1 = a;
   // Serial.println(temperature1);
   // Serial.println(humidity1);
  }  
}

void sendSensor()
{
  readSensor();
  // Bạn có thể gửi bất kỳ giá trị nào vào bất kỳ lúc nào.
   // Vui lòng không gửi nhiều hơn 10 giá trị mỗi giây.
  Blynk.virtualWrite(VPIN_HUMIDITY, humidity1);
  Blynk.virtualWrite(VPIN_TEMPERATURE, temperature1);
  Blynk.virtualWrite(VPIN_Pressure, pressure1);
  Blynk.virtualWrite(VPIN_Altitude, altitude1);
}
//----------------------------------------------------------------OLED_BME280----------------------------------------------------


void setup() {
 Serial.begin(9600);
  pref.begin("Relay_State", false);
  
  pinMode(RelayPin1, OUTPUT);
  pinMode(RelayPin2, OUTPUT);
  pinMode(RelayPin3, OUTPUT);
  pinMode(RelayPin4, OUTPUT);

  pinMode(wifiLed, OUTPUT);

  pinMode(SwitchPin1, INPUT_PULLUP);
  pinMode(SwitchPin2, INPUT_PULLUP);
  pinMode(SwitchPin3, INPUT_PULLUP);
  pinMode(SwitchPin4, INPUT_PULLUP);

  //During Starting all Relays should TURN OFF
  digitalWrite(RelayPin1, !toggleState_1);
  digitalWrite(RelayPin2, !toggleState_2);
  digitalWrite(RelayPin3, !toggleState_3);
  digitalWrite(RelayPin4, !toggleState_4);

  digitalWrite(wifiLed, LOW);
  
  irrecv.enableIRIn(); // Enabling IR sensor
  dht.begin();    // Enabling DHT sensor

  //Blynk.begin(auth, ssid, pass);
  WiFi.begin(ssid, pass);
  timer.setInterval(2000L, checkBlynkStatus); // check if Blynk server is connected every 2 seconds
  timer.setInterval(1000L, sendSensor); // Sending Sensor Data to Blynk Cloud every 1 second
  Blynk.config(auth);
  delay(1000);

  getRelayState(); //fetch data from NVS Flash Memory
  setup_oled_bm280();
}


void loop() { 
  manual_control(); 
  Blynk.run();
  timer.run();
  ir_remote(); //Điều khiển từ xa hồng ngoại
  loop_oled();
}
